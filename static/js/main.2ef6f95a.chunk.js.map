{"version":3,"sources":["core/index.js","components/Header/index.jsx","components/PlayButton/index.jsx","components/RefreshButton/index.jsx","components/TempoSlider/index.jsx","components/DrumRack/index.jsx","components/AddSample/index.jsx","components/Footer/index.jsx","components/SingleSample/index.jsx","utils/samplesList.js","components/SampleSelector/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["updatePitch","sound","pitch","rackPlayers","get","name","playbackRate","updateTempo","tempo","Tone","Transport","bpm","value","updateVolume","volume","Players","toMaster","playSound","start","Header","className","playButton","isPlaying","play","type","onClick","size","refreshButton","refresh","TempoSlider","onchange","min","max","onChange","VolumeSlider","step","PitchSlider","Step","setStep","cursor","useState","box","setBox","id","checked","e","target","DrumRack","remove","currentVolume","setCurrentVolume","currentPitch","setCurrentPitch","seq","setSeq","Array","fill","steps","setSteps","position","setPosition","loaded","setLoaded","invokeCb","pos","split","Number","getTransportPosition","useEffect","has","add","url","newSequence","callback","Sequence","time","note","notes","includes","sequence","dispose","displayName","toUpperCase","map","index","key","console","log","slice","setSingleStep","at","AddSample","Footer","href","SingleSample","onAdd","setPlaying","disabled","samplesList","samplesJson","samples","sample","process","mountSamples","inlineStyles","content","padding","width","left","top","right","bottom","transform","maxWidth","backgroundColor","color","border","overflow","overlay","SampleSelector","cancel","tab","setTab","isOpen","style","contentLabel","Modal","setAppElement","App","addSampleOpen","setAddSampleOpen","currentTempo","setCurrentTempo","setSamples","removeSample","newSamplesList","filter","item","activateSample","PlayButton","text","stop","RefreshButton","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2ef6f95a.chunk.js","sourcesContent":["import Tone from 'tone';\n\n/* Basically, sequencer logic is based here\n * It is tempo/pitch/volume updates\n * and transport control\n * docs: https://tonejs.github.io/docs/13.8.25/Transport\n *       https://tonejs.github.io/docs/13.8.25/Players\n *       https://tonejs.github.io/docs/13.8.25/Player\n */\n\nexport const updatePitch = (sound, pitch) => {\n  rackPlayers.get(sound.name).playbackRate = pitch;\n}\n\nexport const updateTempo = tempo => {\n  Tone.Transport.bpm.value = tempo;\n};\n\nexport const updateVolume = (sound, volume) => {\n  rackPlayers.get(sound.name).volume.value = volume;\n}\n\nexport const startPlaying = () => {\n  Tone.Transport.start('+0.1');\n};\n\nexport const stopPlaying = () => {\n  Tone.Transport.stop();\n};\n\nexport const getTransportPosition = () => {\n  /* [\"0\", \"0\", \"0\"] <--\n   * [\"0\", \"0\", \"3\"] <--\n   * [\"0\", \"1\", \"0\"] <--  */\n  const pos = Tone.Transport.position.split('.')[0].split(':');\n  return Number(pos[1]) * 4 + Number(pos[2]);\n};\n\nexport const rackPlayers = new Tone.Players({}).toMaster();\n\nexport const playSound = name => rackPlayers.get(name).start()\n\n// DOM manipulations in callback are extremly prohibited. Info:\n// https://github.com/Tonejs/Tone.js/wiki/Performance#syncing-visuals\n\n\n// Docs: https://tonejs.github.io/docs/13.8.25/Sequence\nexport const sequence = (sound, callback = () => {}) => {\n  return new Tone.Sequence(\n    (time, note) => {\n      if (note.notes.includes(1)) {\n        rackPlayers.get(sound.name).start();\n      }\n      callback();\n    },\n    new Array(16).fill({ notes: [] }),\n    '16n',\n  );\n}\n\n","import React from 'react';\n\nimport './header.css';\n\nconst Header = () => (\n  <div className=\"header\">\n    <h1>Readrum</h1>\n  </div>\n  );\n\nexport default Header;\n","import React from 'react';\nimport { MdStop, MdPlayArrow } from 'react-icons/md';\n\nimport './play-button.css';\n\nconst playButton = ({ isPlaying, play }) => (\n  <>\n    <button className=\"play-button\" type=\"button\" onClick={play}>\n      {isPlaying ? <MdStop size={32} /> : <MdPlayArrow size={32} />}\n    </button>\n  </>\n);\n\nexport default playButton;\n","import React from 'react';\nimport { MdRefresh } from 'react-icons/md';\n\nimport './refresh-button.css';\n\nconst refreshButton = ({ refresh }) => (\n  <>\n    <button className=\"refresh-button\" type=\"button\" onClick={refresh}>\n      <MdRefresh size={32} />\n    </button>\n  </>\n);\n\nexport default refreshButton;\n","import React from 'react';\n\nimport './tempo-slider.css';\n\nconst TempoSlider = ({ tempo, onchange }) => (\n  <div className=\"tempo-slider\">\n    <div className=\"tempo-slider__slider\">\n      <input\n        type=\"range\"\n        min=\"20\"\n        max=\"260\"\n        value={tempo}\n        onChange={onchange}\n      />\n    </div>\n    <div className=\"tempo-slider__title\">{tempo} BPM</div>\n  </div>\n);\n\nexport default TempoSlider;\n","import React, { useState, useEffect } from 'react';\nimport { sequence, rackPlayers, getTransportPosition } from '../../core';\nimport { updateVolume, updatePitch} from '../../core';\n\nimport './drum-rack.css';\n\nconst VolumeSlider = ({ volume, onchange }) => (\n  <div className=\"volume-slider\">\n    <div className=\"volume-slider__slider\">\n      <input\n        type=\"range\"\n        min=\"-30\"\n        step=\"0.5\"\n        max=\"3\"\n        value={volume}\n        onChange={onchange}\n      />\n    </div>\n    <div className=\"volume-slider__title\">{volume} Volume</div>\n  </div>\n);\n\nconst PitchSlider = ({ pitch, onchange }) => (\n  <div className=\"pitch-slider\">\n    <div className=\"pitch-slider__slider\">\n      <input\n        type=\"range\"\n        min=\"0.50\"\n        step=\"0.01\"\n        max=\"2\"\n        value={pitch}\n        onChange={onchange}\n      />\n    </div>\n    <div className=\"pitch-slider__title\">{pitch} Pitch</div>\n  </div>\n);\n\n// Single step\nconst Step = ({ setStep, name, cursor }) => {\n  const [box, setBox] = useState(false);\n  return (\n    <div className=\"step\">\n      <label className=\"step__label\">\n        <input\n          id=\"name\"\n          className=\"step__checkbox\"\n          type=\"checkbox\"\n          checked={box}\n          name={name}\n          onChange={e => {\n            setBox(e.target.checked);\n            setStep(e.target.checked);\n          }}\n        />\n        <div className={`step__cover${cursor ? ' step__cover--cursor' : ''}`} />\n      </label>\n    </div>\n  );\n};\n\n/*\n * Set state of step in steps array\n * pos: Number. Position of the step in the Array(16)\n * value: Boolean. True if there is a hit on this note.\n * steps: Array. Current sequence: [false, true, ...]\n * setSteps: Setter function.\n */\n\nconst setSingleStep = (pos, value, steps, setSteps) => {\n  console.log(pos, value, steps);\n  setSteps([...steps.slice(0, pos), value, ...steps.slice(pos + 1)]);\n};\n\nconst DrumRack = ({ sound, remove }) => {\n  const [currentVolume, setCurrentVolume] = useState(0);\n  const [currentPitch, setCurrentPitch] = useState(1);\n  const [seq, setSeq] = useState();\n  const [steps, setSteps] = useState(new Array(16).fill(false));\n  const [position, setPosition] = useState(0);\n  const [loaded, setLoaded] = useState(false);\n\n  // Callback for a transport position update loop (curr: every 16th)\n  // https://tonejs.github.io/docs/13.8.25/Sequence\n  const invokeCb = () => {\n    setPosition(getTransportPosition());\n  };\n\n  // On mount, we add the sound to the core.\n  useEffect(() => {\n    if (!rackPlayers.has(sound.name)) {\n      rackPlayers.add(sound.name, sound.url, () => setLoaded(true));\n    } else {\n      setLoaded(true);\n    }\n  }, []);\n\n  // When mount, create a new empty sequence for the sample.\n  useEffect(() => {\n    const newSequence = sequence(sound, () => {\n      invokeCb();\n    }).start(0);\n\n    setSeq(newSequence);\n    return () => {\n      // Destroy sequence on unmount\n      newSequence.dispose();\n    };\n  }, []);\n\n  // Set volume value to slider's value;\n  useEffect(() => {\n    updateVolume(sound, currentVolume);\n    updatePitch(sound, currentPitch);\n  }, []);\n\n  return (\n    <div className=\"drum-rack\">\n      <div className=\"drum-rack__title\">\n        <div>{sound.displayName.toUpperCase()}</div>\n        <div>\n          <button\n            className=\"drum-rack__remove\"\n            type=\"button\"\n            onClick={() => remove(sound.name)}\n          >\n            ×\n          </button>\n        </div>\n      </div>\n      {!loaded && (\n        <div className=\"drum-rack__preloader-container\">\n          <h3> Loading </h3>\n        </div>\n      )}\n      {loaded &&\n        steps.map((step, index) => (\n          <Step\n            name={index + 1}\n            key={index}\n            setStep={value => {\n              setSingleStep(index, value, steps, setSteps);\n              seq.at(index, { notes: value === true ? [1] : [] });\n            }}\n            cursor={position === index}\n          />\n        ))}\n        <div className=\"drum-rack__controls\">\n          <VolumeSlider \n                volume={currentVolume}\n                onchange={e => {\n                  setCurrentVolume(e.target.value);\n                  updateVolume(sound, e.target.value);\n                }}\n              />\n          <PitchSlider \n                pitch={currentPitch}\n                onchange={e => {\n                  setCurrentPitch(e.target.value);\n                  updatePitch(sound, e.target.value);\n                }}\n              />\n        </div>\n    </div>\n  );\n};\n\nexport default DrumRack;\n","import React from 'react';\n\nimport './add-sample.css';\n\nconst AddSample = ({ onClick }) => (\n  <div className=\"add-sample__container\">\n    <div className=\"add-sample\">\n      <div className=\"add-sample__new\">\n        <button\n          type=\"button\"\n          onClick={onClick}\n          className=\"add-sample__button\"\n        >\n          <div className=\"add-sample__text\">ADD</div>\n        </button>\n      </div>\n    </div>\n  </div>\n);\n\nexport default AddSample;\n","import React from 'react';\n\nimport './footer.css';\n\nconst Footer = () => (\n  <div className=\"footer\">\n    Yet, I'm open to offers <a href=\"https://vk.com/theyann\">@mrtheyann</a>\n  </div>\n  );\n\nexport default Footer;\n","import React, { useState, useEffect } from 'react';\nimport { MdPlayArrow } from 'react-icons/md';\n\n\nimport { rackPlayers, playSound } from '../../core';\n\nimport './single-sample.css';\n\nconst SingleSample = ({ displayName, name, url, onAdd }) => {\n  const [isPlaying, setPlaying] = useState(false);\n  const handlePlay = () => {\n    if (isPlaying === false) {\n      setPlaying(true);\n    }\n  };\n\n  useEffect(() => {\n    if (isPlaying === true) {\n      if (!rackPlayers.has(name)) {\n        rackPlayers.add(name, url, () => {\n          setPlaying(false);\n          playSound(name);\n        });\n      } else {\n        playSound(name);\n        setPlaying(false);\n      }\n    }\n  }, isPlaying);\n\n  return (\n    <div className=\"signle-sample\">\n      <button\n        className=\"signle-sample__button\"\n        type=\"button\"\n        onClick={handlePlay}\n        disabled={isPlaying === true}\n      >\n        {isPlaying === false && <MdPlayArrow size={30} />}\n        {isPlaying === true && <h3>Loading</h3>}\n      </button>\n      <button\n        type=\"button\"\n        onClick={onAdd}\n        className=\"signle-sample signle-sample__button signle-sample__name\"\n      >\n        {displayName}\n      </button>\n      {/*\n    <button className=\"signle-sample__button\" type=\"button\" onClick={onAdd}>\n      <MdAdd size={24} />\n    </button>\n*/}\n    </div>\n  );\n};\n\nexport default SingleSample;\n","import samplesJson from '../config/samplesList.json';\n\nconst samplesList = () => samplesJson.samples.map(sample => ({\n  ...sample,\n  url: `${process.env.PUBLIC_URL}${sample.url}`,\n}));\n\nexport default samplesList;\n","import React, { useState } from 'react';\nimport Modal from 'react-modal';\n\nimport SingleSample from '../SingleSample';\n\nimport mountSamples from '../../utils/samplesList';\n\nimport './sample-selector.css';\n\nconst samples = mountSamples();\n\nconst inlineStyles = {\n  content: {\n    position: 'fixed',\n    padding: '0',\n    width: '80%',\n    left: '50%',\n    top: '5%',\n    right: 'auto',\n    bottom: '5%',\n    transform: 'translate(-50%,0)',\n    maxWidth: '30rem',\n    backgroundColor: '#333',\n    color: '#eee',\n    border: '3px solid #444',\n    overflow: 'hidden',\n  },\n  overlay: {\n    backgroundColor: 'rgba(32, 32, 32, 0.75)',\n  },\n};\n\nconst SampleSelector = ({ add, cancel }) => {\n  const [tab, setTab] = useState('samples');\n  return (\n    <Modal isOpen style={inlineStyles} contentLabel=\"Sample Selector Modal\">\n      <div className=\"sample-selector__title\">\n        <h1 className=\"sample-selector__heading-text\">Choose a sample</h1>\n        <button\n          onClick={cancel}\n          type=\"button\"\n          className=\"sample-selector__close\"\n        >\n          ×\n        </button>\n      </div>\n      <div className=\"sample-selector__tabs\">\n        <button\n          className={`sample-selector__tab-button${\n            tab === 'samples'\n              ? ' sample-selector__tab-button--active'\n              : ''\n          }`}\n          type=\"button\"\n          onClick={() => setTab('samples')}\n        >\n          Samples\n        </button>\n      </div>\n      <div className=\"sample-selector__list\">\n        {tab === 'samples' &&\n          samples.map(sample => (\n            <SingleSample\n              onAdd={() => add({ sample: sample.name })}\n              displayName={sample.displayName}\n              name={sample.name}\n              key={sample.name}\n              url={sample.url}\n            />\n          ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default SampleSelector;","import React, { useEffect, useState } from 'react';\nimport Modal from 'react-modal';\nimport { updateTempo, startPlaying, stopPlaying } from './core';\nimport Header from './components/Header';\nimport PlayButton from './components/PlayButton';\nimport RefreshButton from './components/RefreshButton';\nimport TempoSlider from './components/TempoSlider';\nimport DrumRack from './components/DrumRack';\nimport AddSample from './components/AddSample';\nimport Footer from './components/Footer';\nimport SampleSelector from './components/SampleSelector';\n\nimport './App.css';\n\nimport mountSamples from './utils/samplesList';\n\nconst samplesList = mountSamples();\n\nModal.setAppElement('#root');\n\nconst App = () => {\n  const [addSampleOpen, setAddSampleOpen] = useState(false);\n  const [currentTempo, setCurrentTempo] = useState(120);\n  const [samples, setSamples] = useState(samplesList.slice(0, 1));\n  const [isPlaying, setPlaying] = useState(false);\n\n  useEffect(() => {\n    updateTempo(currentTempo);\n  });\n\n  const play = () => {\n    if (isPlaying) {\n      stopPlaying();\n      setPlaying(false);\n    } else {\n      startPlaying();\n      setPlaying(true);\n    }\n  };\n\n  const refresh = () => {\n    const emptySamplesList = [];\n    setSamples(emptySamplesList);\n  }\n\n /*\n  *const randomizeSinglePattern = () => {\n  *  const newPattern = [...Array(16)].map((_, i) => Math.random() >= 0.5)\n  *  console.log('pattern: ', newPattern);\n  *  return newPattern;\n  }\n  */\n\n  const activateSample = sample => {\n    const newSamplesList = [\n      ...samples.filter(item => item.name !== sample),\n      ...samplesList.filter(item => item.name === sample),\n    ];\n    setSamples(newSamplesList);\n  };\n\n  const removeSample = sample => {\n    const newSamplesList = [\n      ...samples.filter(item => item.name !== sample),\n    ];\n    setSamples(newSamplesList);\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      {addSampleOpen && (\n        <SampleSelector\n          cancel={() => setAddSampleOpen(false)}\n          add={sample => {\n            if (sample.sample) {\n              activateSample(sample.sample);\n            }\n            setAddSampleOpen(false);\n          }}\n        />\n      )}\n      <div className=\"drum-cols\">\n        <div className=\"controls\">\n          <div className=\"buttons\">\n              <PlayButton text=\"Start / Stop\" play={play} isPlaying={isPlaying} />\n              <RefreshButton text=\"Refresh\" refresh={refresh} />\n          </div>\n          <TempoSlider\n            tempo={currentTempo}\n            onchange={e => {\n              setCurrentTempo(e.target.value);\n              updateTempo(e.target.value);\n            }}\n          />\n        </div>\n        {samples.map(sample => (\n          <DrumRack\n            key={sample.name}\n            sound={sample}\n            remove={removeSample}\n          />\n        ))}\n        <AddSample\n          onClick={() => {\n            setAddSampleOpen(true);\n          }}\n        />\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}